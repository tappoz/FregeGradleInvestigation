apply plugin: 'java'
apply plugin: 'idea'

version = '1.0'
sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    mavenCentral()
}

// TODO refactor with: https://gist.github.com/Dierk/6566983
dependencies {

    //compile 'com.theoryinpractise.frege:frege:3.21.586-g026e8d7'
    compile files('lib/frege3.21.586-g026e8d7.jar')

}


// To compile the Frege code use something like:
// java -Xss1m -jar lib/frege3.21.586-g026e8d7.jar -d src/main/java/build src/main/frege/HelloFrege.fr
// To run the compiled Frege code:
// java -cp src/main/java/build/:lib/frege3.21.586-g026e8d7.jar:. HelloFrege
// To read the help of the Frege command:
// java -jar lib/frege3.21.586-g026e8d7.jar -help
task generateJavaSrcFromFregeSrc {
    ant.java(jar:"lib/frege3.21.586-g026e8d7.jar",fork:true) {
        arg(value: "-j") // do not run the java compiler
        arg(value: "-d")
        arg(value: "src/main/java") // the place where to put the generated source code (paired to the -d argument)
        arg(value: "src/main/frege/HelloFrege.fr")
    }
}


jar {
    manifest {
       attributes 'Main-Class': 'org.tappoz.frege.HelloFrege'
    }
}

task fatJar(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    //from {configurations.compile.collect {zipTree(it)}} // this does not include the autogenerated source code
    baseName = project.name + '-fatJar'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}